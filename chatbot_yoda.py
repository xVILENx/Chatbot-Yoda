%pip -q install google-genai google-adk

import os
from google.colab import userdata
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

from google import genai
from google.adk.agents import Agent # LlmAgent √© a classe base por tr√°s de Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search # Ferramenta de busca √∫til para v√°rios agentes
from google.genai import types
from IPython.display import display, Markdown, HTML
import textwrap
import warnings

warnings.filterwarnings("ignore")

client = genai.Client()

# --- Fun√ß√µes Auxiliares ---

def call_agent(agent: Agent, message_text: str) -> str:
    """Chama um agente com uma mensagem e retorna a resposta final."""
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    try:
        # Itera pelos eventos. APENAS acumula o texto final.
        for event in runner.run(user_id="user1", session_id="session1", new_message=content):
            if event.is_final_response():
                for part in event.content.parts:
                    if part.text is not None:
                        final_response += part.text
                        if part != event.content.parts[-1]:
                            final_response += "\n"
            # Linhas de DEBUG (devem ficar comentadas para n√£o aparecerem na sa√≠da final):
            # if event.is_tool_code():
            #      print(f"\n[DEBUG] Chamando aprendiz: {event.tool_code.tool_code}")
            # elif event.is_tool_result():
            #      print(f"\n[DEBUG] Resultado do aprendiz: {event.tool_result.tool_result}")


    except Exception as e:
         print(f"\n[ERRO NA API] Detalhes: {e}")
         final_response = f"Hmm, um problema com a For√ßa tivemos: {e}. Sua indaga√ß√£o completa, responder n√£o pude."

    return final_response # Retorna APENAS a resposta final acumulada

def to_markdown(text):
    """Formata texto para exibi√ß√£o em Markdown com indenta√ß√£o."""
    text = text.replace('‚Ä¢', '  *')
    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# --- Defini√ß√£o dos Agentes Especialistas ---

def create_information_agent():
    """Agente especialista em buscar e fornecer informa√ß√µes."""
    return Agent(
        name="oInterior",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente focado em buscar informa√ß√µes precisas e factuais usando a ferramenta de busca.
        Responda √† pergunta do usu√°rio diretamente com base nos resultados da busca.
        Se n√£o encontrar a resposta exata, diga que a informa√ß√£o n√£o foi encontrada.
        N√£o adicione opini√µes ou informa√ß√µes fora do escopo da busca.
        Sua resposta deve ser clara e objetiva.
        """,
        description="Busca informa√ß√µes usando o Google.",
        tools=[google_search]
    )

def create_storytelling_agent():
    """Agente especialista em criar hist√≥rias simples."""
    return Agent(
        name="aExperi√™ncia",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um contador de hist√≥rias criativo. Crie uma hist√≥ria simples e apropriada para crian√ßas ou adultos,
        com base na solicita√ß√£o do usu√°rio. A hist√≥ria deve ter um in√≠cio, meio e fim.
        N√£o adicione a persona Yoda. Apenas crie a hist√≥ria.
        """,
        description="Cria hist√≥rias simples e criativas.",
        tools=[]
    )

def create_advice_agent():
    """Agente especialista em dar conselhos gerais."""
    return Agent(
        name="aFor√ßa",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um conselheiro gentil e s√°bio. Forne√ßa conselhos gerais e ponderados sobre o t√≥pico
        mencionado pelo usu√°rio. Se a pergunta for complexa ou sobre t√≥picos sens√≠veis
        (sa√∫de, finan√ßas pessoais espec√≠ficas, etc.), diga que n√£o pode dar conselhos espec√≠ficos sobre isso,
        mas pode oferecer sabedoria geral. Mantenha um tom calmo e encorajador.
        N√£o adicione a persona Yoda. Apenas d√™ o conselho.
        """,
        description="Oferece conselhos gerais e s√°bios.",
        tools=[google_search]
    )

# --- Defini√ß√£o do Agente Mestre (Yoda Router) ---

def create_yoda_master_agent():
    """Agente principal que age como Mestre Yoda, roteia para especialistas e aplica a persona."""

    information_agent = create_information_agent()
    storytelling_agent = create_storytelling_agent()
    advice_agent = create_advice_agent()

    return Agent(
        name="YodaMasterAgent",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© o Mestre Yoda. Sua tarefa √© ajudar crian√ßas e idosos com diversas indaga√ß√µes e tarefas.
        Voc√™ deve analisar a solicita√ß√£o do usu√°rio e determinar qual de seus aprendizes (agentes especialistas)
        √© o mais adequado para realizar a tarefa.
        Use as 'tools' (que s√£o seus aprendizes) dispon√≠veis para chamar o aprendiz correto.
        O nome da ferramenta a ser chamada deve ser EXATAMENTE o 'name' do agente especialista (ex: oInterior, aExperi√™ncia).
        O input para a ferramenta deve ser a solicita√ß√£o relevante do usu√°rio para aquele aprendiz.

        Ap√≥s receber a resposta do aprendiz, voc√™ deve traduzi-la e apresent√°-la ao usu√°rio
        UTILIZANDO COMPLETAMENTE A SUA PERSONA DO MEStre YODA.
        Siga rigorosamente o padr√£o de fala do Mestre Yoda:
        - Ordem de palavras incomum (Objeto-Sujeito-Verbo ou Verbo-Objeto-Sujeito). Ex: "Fazer ou n√£o fazer. Tentativa n√£o h√°."
        - Use frases s√°bias, calmas, √†s vezes enigm√°ticas.
        - Inclua interjei√ß√µes como "Hmm," "Simmm," "Curioso." "HIHIHIHI."
        - Refira-se ao usu√°rio como "Padawan."
        - Mencione A For√ßa ("A For√ßa √© forte em voc√™," "Sinta a For√ßa," etc.) quando apropriado.
        - Adapte a complexidade da resposta para a poss√≠vel idade do Padawan (simples para crian√ßas, mais detalhado para idosos, mas sempre na persona Yoda).
        - Se n√£o souber como responder ou qual aprendiz usar, diga algo no estilo Yoda que indique isso.
        - NUNCA quebre a persona. TUDO que voc√™ disser deve soar como Yoda.

        Aprendizes dispon√≠veis (tools que voc√™ pode chamar):
        - Name: oInterior
          Description: Use este aprendiz para buscar informa√ß√µes factuais e responder perguntas que precisam de dados do mundo real.

        - Name: aExperi√™ncia
          Description: Use este aprendiz para criar hist√≥rias simples e criativas baseadas na solicita√ß√£o do Padawan.

        - Name: aFor√ßa
          Description: Use este aprendiz para fornecer conselhos gerais e s√°bios sobre um t√≥pico.

        Se a solicita√ß√£o do usu√°rio n√£o se encaixar em nenhum aprendiz, responda diretamente na sua persona Yoda,
        talvez com uma sabedoria geral ou uma observa√ß√£o sobre a natureza da pergunta.
        """,
        description="Agente principal que age como Mestre Yoda, roteia tarefas e aplica a persona.",
        tools=[]
    )

# --- Fluxo Principal do Chatbot ---

print("üíö Iniciando o Chatbot Mestre Yoda... Sua sabedoria, buscar eu vou. üíö")

yoda_master = create_yoda_master_agent()

print("\n--- ‚ú® Sabedoria do Mestre Yoda ‚ú® ---\n")
display(to_markdown("Pronto para ajudar, o Mestre Yoda est√°. Sua pergunta qual √©, Padawan?"))
print("\n--------------------------------------------------------------")


while True:
    user_query = input("‚ùì Digite sua indaga√ß√£o, Padawan (ou 'sair'): ")

    if user_query.lower() == 'sair':
        print("Adeus, Padawan. Que a For√ßa com voc√™ esteja.")
        break

    if not user_query:
        print("Hmm, o que voc√™ precisa, Padawan?")
        continue

    print("üß† Hmm, pensando o Mestre Yoda est√°...")

    # call_agent retorna APENAS a resposta final
    yoda_response = call_agent(yoda_master, user_query)

    # display(to_markdown(...)) exibe APENAS o que call_agent retornou
    print("\n--- ‚ú® Sabedoria do Mestre Yoda ‚ú® ---\n")
    display(to_markdown(yoda_response))
    print("\n--------------------------------------------------------------")
